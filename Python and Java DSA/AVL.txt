----Java Code----
class Node 
{ 
    int key, height; 
    Node left, right; 
  
    Node(int d) 
    { 
        key = d; 
        height = 1; 
    } 
} 
  
class AVLTree 
{ 
    Node root; 

    int height(Node N) 
    { 
        if (N == null) 
            return 0; 
        return N.height; 
    } 

    int max(int a, int b) 
    { 
        return (a > b) ? a : b; 
    } 

    Node rightRotate(Node y) 
    { 
        Node x = y.left; 
        Node T2 = x.right; 
  

        x.right = y; 
        y.left = T2; 
  

        y.height = max(height(y.left), height(y.right)) + 1; 
        x.height = max(height(x.left), height(x.right)) + 1; 
  
        // Return new root 
        return x; 
    } 
  

    Node leftRotate(Node x) 
    { 
        Node y = x.right; 
        Node T2 = y.left; 
  

        y.left = x; 
        x.right = T2; 
  

        x.height = max(height(x.left), height(x.right)) + 1; 
        y.height = max(height(y.left), height(y.right)) + 1; 
  

        return y; 
    } 
  

    int getBalance(Node N) 
    { 
        if (N == null) 
            return 0; 
        return height(N.left) - height(N.right); 
    } 
  
    Node insert(Node node, int key) 
    { 

        if (node == null) 
            return (new Node(key)); 
  
        if (key < node.key) 
            node.left = insert(node.left, key); 
        else if (key > node.key) 
            node.right = insert(node.right, key); 
        else // Equal keys not allowed 
            return node; 
  

        node.height = 1 + max(height(node.left), 
                            height(node.right)); 
  

        int balance = getBalance(node); 
  

        if (balance > 1 && key < node.left.key) 
            return rightRotate(node); 
  

        if (balance < -1 && key > node.right.key) 
            return leftRotate(node); 
  

        if (balance > 1 && key > node.left.key) 
        { 
            node.left = leftRotate(node.left); 
            return rightRotate(node); 
        } 
  

        if (balance < -1 && key < node.right.key) 
        { 
            node.right = rightRotate(node.right); 
            return leftRotate(node); 
        } 
  

        return node; 
    } 
  

    Node minValueNode(Node node) 
    { 
        Node current = node; 
  

        while (current.left != null) 
        current = current.left; 
  
        return current; 
    } 
  
    Node deleteNode(Node root, int key) 
    { 

        if (root == null) 
            return root; 
  

        if (key < root.key) 
            root.left = deleteNode(root.left, key); 
  
 
        else if (key > root.key) 
            root.right = deleteNode(root.right, key); 
  

        else
        { 
  
 
            if ((root.left == null) || (root.right == null)) 
            { 
                Node temp = null; 
                if (temp == root.left) 
                    temp = root.right; 
                else
                    temp = root.left; 
  

                if (temp == null) 
                { 
                    temp = root; 
                    root = null; 
                } 
                else  
                    root = temp; 
            } 
            else
            { 
  

                Node temp = minValueNode(root.right); 
  

                root.key = temp.key; 

                root.right = deleteNode(root.right, temp.key); 
            } 
        } 
  

        if (root == null) 
            return root; 
  

        root.height = max(height(root.left), height(root.right)) + 1; 
  

        int balance = getBalance(root); 
  

        if (balance > 1 && getBalance(root.left) >= 0) 
            return rightRotate(root); 
  

        if (balance > 1 && getBalance(root.left) < 0) 
        { 
            root.left = leftRotate(root.left); 
            return rightRotate(root); 
        } 

        if (balance < -1 && getBalance(root.right) <= 0) 
            return leftRotate(root); 
  

        if (balance < -1 && getBalance(root.right) > 0) 
        { 
            root.right = rightRotate(root.right); 
            return leftRotate(root); 
        } 
  
        return root; 
    }

	Node search(Node root,int key){
	
		Node temp = root;
		return searchRec(temp,key);
		
	}
	 Node searchRec(Node root,int key)
	{

		if (root==null || root.key==key)
			return root;
	 

		if (root.key < key)	
		   return search(root.right, key);
	 

		return search(root.left, key);
	}

 
}



-----Python Code-----

class AVL():
    def __init__(self):
        self.root=None

class AVLFunction():
    def __init__(self):
        self.output=[]
    
    def insertAVL(self, root, data):


        if not root:

            return Node(data)
        elif data < root.data:

            root.left = self.insertAVL(root.left, data)
        else:

            root.right = self.insertAVL(root.right, data)

        root.height = 1 + max(self.getHeight(root.left),
                           self.getHeight(root.right))

        balance = self.getBalance(root)

        if balance > 1 and data < root.left.data:

            return self.rightRotate(root)

        if balance < -1 and data > root.right.data:

            return self.leftRotate(root)

        if balance > 1 and data > root.left.data:

            root.left = self.leftRotate(root.left)
            return self.rightRotate(root)

        if balance < -1 and data < root.right.data:

            root.right = self.rightRotate(root.right)
            return self.leftRotate(root)
 
        return root
 
    def leftRotate(self, z):

        y = z.right
        T2 = y.left
 

        y.left = z
        z.right = T2


        z.height = 1 + max(self.getHeight(z.left),
                         self.getHeight(z.right))
        y.height = 1 + max(self.getHeight(y.left),
                         self.getHeight(y.right))

        return y
 
    def rightRotate(self, z):
 
        y = z.left
        T3 = y.right


        y.right = z
        z.left = T3


        z.height = 1 + max(self.getHeight(z.left),
                        self.getHeight(z.right))
        y.height = 1 + max(self.getHeight(y.left),
                        self.getHeight(y.right))

        return y
 
    def getHeight(self, root):
        if not root:
            return 0
        return root.height

    def getBalance(self, root):
        if not root:
            return 0
        
        return self.getHeight(root.left) - self.getHeight(root.right)

    def getMinValueNode(self, root):
        if root is None or root.left is None:
            return root
  
        return self.getMinValueNode(root.left)

    def searchAVL(self,root,data):
        if root:
            
            if data==root.data:
                
                return True
            
            if data > root.data:
                
                return self.searchAVL(root.right,data)
            else:
                
                return self.searchAVL(root.left,data)

        return False
    
    def deleteAVL(self, root, data):
  
        
        if not root:
            
            return root

        elif data < root.data:

            root.left = self.deleteAVL(root.left, data)
  
        elif data > root.data:

            root.right = self.deleteAVL(root.right, data)
  
        else:
            if root.left is None:

                temp = root.right
                root = None
                return temp
  
            elif root.right is None:

                temp = root.left
                root = None
                return temp


            temp = self.getMinValueNode(root.right)

            root.data = temp.data

            root.right = self.deleteAVL(root.right,
                                      temp.data)

        if root is None:
            return root


        root.height = 1 + max(self.getHeight(root.left),
                            self.getHeight(root.right))


        balance = self.getBalance(root)

        
        if balance > 1 and self.getBalance(root.left) >= 0:

            return self.rightRotate(root)

        
        if balance < -1 and self.getBalance(root.right) <= 0:
            
            return self.leftRotate(root)

        
        if balance > 1 and self.getBalance(root.left) < 0:

            
            root.left = self.leftRotate(root.left)
            return self.rightRotate(root)

        
        if balance < -1 and self.getBalance(root.right) > 0:

            root.right = self.rightRotate(root.right)
            return self.leftRotate(root)

        return root
