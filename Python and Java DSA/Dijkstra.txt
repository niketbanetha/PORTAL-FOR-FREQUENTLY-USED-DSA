------Java Code--------
class DijkstraAlgorithm{
    int minDistance(int dist[], Boolean sptSet[],int V)
    {

        int min = Integer.MAX_VALUE, min_index = -1;
  
        for (int v = 0; v < V; v++)
            if (sptSet[v] == false && dist[v] <= min) {
                min = dist[v];
                min_index = v;
            }
  
        return min_index;
    }
  

    void printSolution(int dist[],int V)
    {
        System.out.println("Vertex \t\t Distance from Source");
        for (int i = 0; i < V; i++)
            System.out.println(i + " \t\t " + dist[i]);
    }
  

    void dijkstra(int graph[][], int src,int V)
    {
        int dist[] = new int[V]; 
        Boolean sptSet[] = new Boolean[V];

        for (int i = 0; i < V; i++) {
            dist[i] = Integer.MAX_VALUE;
            sptSet[i] = false;
        }
  

        dist[src] = 0;

        for (int count = 0; count < V - 1; count++) {

            int u = minDistance(dist, sptSet,V);

            sptSet[u] = true;

            for (int v = 0; v < V; v++)

                if (!sptSet[v] && graph[u][v] != 0 && dist[u] != Integer.MAX_VALUE && dist[u] + graph[u][v] < dist[v])
                    dist[v] = dist[u] + graph[u][v];
        }
  
        printSolution(dist,V);
    }
}


------Python Code--------
class DijkstraAlgorithm():
    def __init__(self,n):
        self.n=n
        self.graph=defaultdict(list)

		
    def mindist(self,dist,sptset):
        mini=float("inf")
        for i in range(0,self.n):
            if mini>dist[i] and sptset[i]==False:
                mini=dist[i]
                min_index=i
        return min_index
  
    def Dijkstra(self,src):

        dist=[2*10**31]*self.n 
        dist[src]=0

        sptset=[False]*self.n
        for _ in range(self.n):

            u=self.mindist(dist,sptset)

            sptset[u]=True

            for node,weight in self.graph[u]:

                if sptset[node]==False:

                    dist[node]=min(dist[node],dist[u]+weight)


        
        for node,distance in enumerate(dist):
            if distance == 2*10**31:
                distance="No Edge"
            print("Min distance of node {} from source {} is {}".format(node,src,distance))