----Java Code----

import java.io.*;
import java.util.*;



class LinearProbingHashTable {
	// Member variables of this class
	private int currentSize, maxSize;
	private String[] keys;
	private String[] vals;


	public LinearProbingHashTable(int capacity)
	{
		currentSize = 0;
		maxSize = capacity;
		keys = new String[maxSize];
		vals = new String[maxSize];
	}


	public void makeEmpty()
	{
		currentSize = 0;
		keys = new String[maxSize];
		vals = new String[maxSize];
	}


	public int getSize() { return currentSize; }


	public boolean isFull()
	{
		return currentSize == maxSize;
	}

	public boolean isEmpty() { return getSize() == 0; }

	// Method 5
	// Fucntion to check if hash table contains a key
	public boolean contains(String key)
	{
		return get(key) != null;
	}


	private int hash(String key)
	{
		return key.hashCode() % maxSize;
	}


	public void insert(String key, String val)
	{
		int tmp = hash(key);
		int i = tmp;


		do {
			if (keys[i] == null) {
				keys[i] = key;
				vals[i] = val;
				currentSize++;
				return;
			}

			if (keys[i].equals(key)) {
				vals[i] = val;
				return;
			}

			i = (i + 1) % maxSize;

		}


		while (i != tmp);
	}


	public String get(String key)
	{
		int i = hash(key);
		while (keys[i] != null) {
			if (keys[i].equals(key))
				return vals[i];
			i = (i + 1) % maxSize;
		}
		return null;
	}


	public void remove(String key)
	{
		if (!contains(key))
			return;

		int i = hash(key);
		while (!key.equals(keys[i]))
			i = (i + 1) % maxSize;
		keys[i] = vals[i] = null;


		for (i = (i + 1) % maxSize; keys[i] != null;
			i = (i + 1) % maxSize) {
			String tmp1 = keys[i], tmp2 = vals[i];
			keys[i] = vals[i] = null;
			currentSize--;
			insert(tmp1, tmp2);
		}
		currentSize--;
	}


	public void printHashTable()
	{
		System.out.println("\nHash Table: ");
		for (int i = 0; i < maxSize; i++)
			if (keys[i] != null)
				System.out.println(keys[i] + " " + vals[i]);
		System.out.println();
	}
}


-----Python Code----
class LinearProbing():

    def __init__(self,size):
        self.output=[]
        self.hash={i:None for i in range(size)}
        self.size=size
    
    def insert(self,data):
        
        index=data%self.size
        
        if self.hash[index]==None:
            self.hash[index]=data

            return True
        else:

            i=1
            while i<=self.size:
                
                cng_index=(index+i)%self.size
                
                i+=1
                
                if self.hash[cng_index]==None:
                    self.hash[cng_index]=data
                    return True

        return False

    def delete(self,data):
        index=data%self.size

        if self.hash[index]==data:
            self.hash[index]=None
            return True
        else:
            i=1
            while i<=self.size:

                cng_index=(index+i)%self.size

                i+=1

                if self.hash[cng_index]==data:

                    self.hash[cng_index]=None

                    return True

        return False
        
    def search(self,data):

        index=data%self.size

        if self.hash[index]==data:

            return index
        else:
            i=1
            while i<=self.size:

                cng_index=(index+i)%self.size

                i+=1
             
                if self.hash[cng_index]==data:
                    return cng_index

        return False