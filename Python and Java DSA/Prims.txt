-----Java Code-----
class PrimsAlgorithm {

    private static final int V = 5;
  
    int minKey(int key[], Boolean mstSet[])
    {
        // Initialize min value
        int min = Integer.MAX_VALUE, min_index = -1;
  
        for (int v = 0; v < V; v++)
            if (mstSet[v] == false && key[v] < min) {
                min = key[v];
                min_index = v;
            }
  
        return min_index;
    }
  

    void printMST(int parent[], int graph[][])
    {
        System.out.println("Edge \tWeight");
        for (int i = 1; i < V; i++)
            System.out.println(parent[i] + " - " + i + "\t" + graph[i][parent[i]]);
    }
  

    void primMST(int graph[][])
    {

        int parent[] = new int[V];

        int key[] = new int[V];

        Boolean mstSet[] = new Boolean[V];
  

        for (int i = 0; i < V; i++) {
            key[i] = Integer.MAX_VALUE;
            mstSet[i] = false;
        }
  

        key[0] = 0; 
        parent[0] = -1; 
  

        for (int count = 0; count < V - 1; count++) {

            int u = minKey(key, mstSet);

            mstSet[u] = true;
  

            for (int v = 0; v < V; v++)
  

                if (graph[u][v] != 0 && mstSet[v] == false && graph[u][v] < key[v]) {
                    parent[v] = u;
                    key[v] = graph[u][v];
                }
        }

        printMST(parent, graph);
    }
}



--------Python Code-----
class PrimsAlgorithm():
    def __init__(self,n):
        self.n=n
        self.graph=defaultdict(list)

		
    def listToMatrix(self):
        self.matrix=[[0 for i in range(self.n)] for j in range(self.n)]
        for u in self.graph:
            for v,w in self.graph[u]:
                self.matrix[u][v]=w
				
	def Prims(self):
        self.listToMatrix()

        key=[2*10**31]*self.n

        mst=[False]*self.n
        key[0]=0

        parent=[0]*self.n
        parent[0]=-1

        for _ in range(self.n):

            minnum=2*10**31

            for k in range(self.n): 
                if key[k]<minnum and mst[k]==False:
                    minnum=key[k]
                    u=k

            mst[u]=True


            
            for j in range(self.n):

                if self.matrix[u][j]>0 and mst[j]==False and key[j]>self.matrix[u][j]:

                    key[j]=self.matrix[u][j]
                    parent[j]=u
        

        for i in range(1, self.n):
            print("Edge {}-{} Weight {}".format(parent[i], i, self.matrix[i][parent[i]]))
